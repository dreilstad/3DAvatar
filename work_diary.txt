Week 1 (16.06 - 17.06)
    - setup of Azure Kinect SDK.
        - The python wrapper is especially tricky to get working on Ubuntu 20.04.
        - depth camera may not be able to load unless in root dir, the solution is:
            - libk4a*-dev deb package contains the udev rules "scripts/99-k4a.rules",
            which have to be copied to "etc/udev/rules.d/" directory
    - implemented simple viewer of data from Kinect camera
    - segmentation fault may be caused if using Wide FOV with low USB memory
    - with multiple kinects, USB memory must be increased and/or use dedicated USB hub
        - see: https://docs.microsoft.com/en-us/azure/kinect-dk/multi-camera-sync


Week 2 (20.06 - 24.06)
    - implemented synchronization between multiple devices
        - implementation uses threads for capturing synchronized
    - camera intrinsics are accessible through the kinect SDK
        - further investigation of the accuracy of the camera intrinsics may be necessary
    - implemented ArUco detection for getting extrinsics
        - had issues with IR interference causing ArUco detection failure
            - any reflective material will cause detection failure
            - may need processing to remove IR saturation spots
    - implemented transformation between kinect cameras
        - needs further work because transformed point clouds do not align


Week 3 (27.06 - 01.07)
    - spent some time debugging the transformations
        - transformed point clouds did not align by a lot
        - transforming manually works is better than with Open3D
    - completed fusion of point clouds via transformation
        - fused point clouds are not always consistent, sometimes the point clouds
          are slightly in different times every time the static subject is scanned
        - may need to use ICP algorithm for more accurate alignment, or
          another perhaps something more robust than a single ArUco for extrinsics
    - implemented ground removal from point cloud
    - implemented outlier removal

Week 4 (04.07 - 08.07)
    - tested with an AruCo board instead of a single AruCo marker
        - negligible improvement
    - spent time improving alignment of point clouds
        - pose estimation is now more consistent due to tuning of ArUco dictionary parameters
            - testing needs to be done if the tuning is dependent on environment and light conditions
    - multiway registration in open3D is able to align two of the three point clouds "perfectly",
      but not the remaining point cloud
    - added comments to code

Week 5 (11.07 - 15.07)
    - implemented real-time viewer
        - profiled code
        - optimized it to achieve a smoother real-time viewer with a denser point cloud
    - set up camera rig with 6 cameras
    - implemented functionality to save point cloud "frames"
    - implemented functionality to replay of saved point cloud frames
    - discovered a large latency of up to 0.2 s between frames from devices
        - known issue, see:
            - https://github.com/microsoft/Azure-Kinect-Sensor-SDK/issues/816#issuecomment-583161328
        - need to check if frames can be manually synced
    - fixed latency by changing device config flag synchronized_images_only to False instead of True
        - not recommended by the SDK when using multiple devices. Gives non-critical error, no effect on result.
        - latency between frames is significantly reduced
        - means that the color and depth image will not arrive at the same time.
    - replay of frames and real-time view of point cloud is now smooth without skipping frames

Week 6 (18.07 - 22.07)
    - implemented way to suppress constant non-exiting error message printing to console from SDK/wrapper
    - continued documenting and commenting code
    - restructured folders, added src/ and examples/ directory
    - implemented functionality to write point cloud frames to HDF5 dataset
    - added configuration functionality, more user-friendly to run with different configuration options
    - started to learn about and implement pose optimization with gtsam

Week 7 (25.07 - 28.07)
    - continued with pose optimization
    - implemented functionality to save point cloud frames as a gif








